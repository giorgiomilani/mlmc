import argparse
from pathlib import Path
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import numpy as np
import pandas as pd

from mlmc.utils.plot import set_plot_style, NATURE, STYLES, LINEWIDTH_SIZE

DATA_DIR = Path("../data/asian_option/mlmc_runs")
PLOT_DIR = Path("../plots/asian_option/mlmc_runs")
PLOT_DIR.mkdir(exist_ok=True, parents=True)


def main(eps_min: float, eps_max:float, nsamp_pilot: int=int(50000), nlevels_pilot:int=int(8), style: str = NATURE, usetex: bool = False) -> None:
    
    h_coarse = 0.2 #this is fixed by the statement.
    df = pd.read_csv( DATA_DIR / f"mlmc_epsmax={eps_max}_epsmin={eps_min}_nsamp_pilot={nsamp_pilot}_nlevels_pilot={nlevels_pilot}.csv")
    
    eps = df["eps"]
    cpu_time = df["cpu_time"]
    mean = df["mean"]  #this is for each level esp(Yl - Yl-1)
    variance = df["variance"]  #this is var(Yl - Yl-1)/nsamp
    Nlevels = df["nlevels"] #number of levels used for the run
    N0 = df["N0"] #number of samples needed at first level l=0
    
    # Make figures:
    set_plot_style(style, usetex)
    fig, (ax_cpu_time, ax_Nlevels, ax_N0) = plt.subplots(
        3, 1, figsize=(LINEWIDTH_SIZE[0], 6), layout="constrained", sharex=True
    )
    
    # Plot CPU time vs. eps
    ax_cpu_time.loglog(eps, cpu_time, label="CPU time [s]", marker="o", linestyle="None")
    ax_cpu_time.set_xlim(eps.min(), eps.max())
    ax_cpu_time.legend(loc="best")
    
    # Plot number of levels vs. eps
    ax_Nlevels.semilogx(eps, Nlevels, label=r"Number of levels $L$", marker="o", linestyle="None")
    ax_Nlevels.set_xlim(eps.min(), eps.max())
    ax_Nlevels.legend(loc="best")
    ax_Nlevels.yaxis.set_major_locator(MaxNLocator(integer=True))

    # Plot N0 vs. eps
    ax_N0.semilogx(eps, N0, label="$N_0$: $N_{sample}$ needed for first level $l=0$", marker="o", linestyle="None")
    ax_N0.set_xlim(eps.min(), eps.max())
    ax_N0.set_xlabel(r"$\epsilon$")
    ax_N0.legend(loc="best")
    ax_N0.yaxis.set_major_locator(MaxNLocator(integer=True))
    
    #save the figure:
    fn = f"mlmc_epsmax={eps_max}_epsmin={eps_min}_nsamp_pilot={nsamp_pilot}_nlevels_pilot={nlevels_pilot}.pdf"
    fig.savefig(PLOT_DIR / fn)
    print(f"Plot saved to {PLOT_DIR / fn}")
    

argParse = 0 #set to zero if you run the file from an IDE, to 1 to run from command line 


if argParse:
    if __name__ == "__main__":
        parser = argparse.ArgumentParser(
            description="Script to plot the biases and variances from the pilot run. It uses datas generated by pilot_run.py"
        )
        parser.add_argument("--nsamp", type=int, default=10000, help="Number of samples, same for all levels.")
        parser.add_argument("--nlevels", type=int, default=10000, help="Number of levels in the pilot run")
        parser.add_argument(
            "--style", type=str, default=NATURE, choices=STYLES, help="Plot style"
        )
        parser.add_argument(
            "--usetex", action="store_true", help="Use LaTeX for text rendering"
        )
        args = parser.parse_args()
    
        main(args.nsamp, args.nseeds, args.style, args.usetex)
        

else:
    if __name__ == "__main__":
    
        main(
            eps_min=1e-6,
            eps_max=1e-4,
        )

    
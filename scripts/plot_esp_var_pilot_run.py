import argparse
from pathlib import Path
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import numpy as np
import pandas as pd

from mlmc.utils.plot import set_plot_style, NATURE, STYLES, LINEWIDTH_SIZE

DATA_DIR = Path("../data/asian_option/pilot_run")
PLOT_DIR = Path("../plots/asian_option/pilot_run")
PLOT_DIR.mkdir(exist_ok=True, parents=True)


def main(nsamp_in: int, nlevels:int, style: str = NATURE, usetex: bool = False) -> None:
    
    h_coarse = 0.2 #this is fixed by the statement.
    df = pd.read_csv( DATA_DIR / f"pilot_mlmc_h_coarse={h_coarse}_nsamp_pilot={nsamp_in}_nlevels_pilot={nlevels}.csv")
    
    biases = df["biases"]
    var = df["variances"]
    levels = df["nlevels_pilot"]
    max_level = levels.iloc[0]  # Get any value in levels : it's the max level we went to.
    vec_levels = np.arange(0,max_level)
    nsamp = df["nsamp_pilot"] #this is a series. to have just n samp as an int look at nsamp_in
    E0 = df["E0"]
    V0 = df["V0"]

    print("E0 = "+str(E0[0])+", and V0 = "+str(V0[0]))
         
    #Make figures:
    set_plot_style(style, usetex)
    fig, (ax_bias, ax_var) = plt.subplots(
        2, 1, figsize=(LINEWIDTH_SIZE[0], 4), layout="constrained", sharex=True
    )
    
    ax_bias.semilogy(vec_levels, biases, label=r"$\mathrm{E}[Y_l - Y_{l-1}]$", marker="o", linestyle="None")
    ax_bias.set_xlim(vec_levels.min(), vec_levels.max())

    ax_bias.semilogy(
        vec_levels[1:],
         E0[0] *2.0**(-vec_levels[1:]),
         label="$E_0 2^{-l}$",
         linestyle="--",
         color="black",
     )
    ax_bias.legend(loc="best")
     
    ax_var.semilogy(vec_levels, var, label=r"$\mathrm{V}[Y_l - Y_{l-1}]$", marker="o", linestyle="None")
    ax_var.set_xlim(vec_levels.min(), vec_levels.max())
    ax_var.set_xlabel("Level l")
    
    ax_var.semilogy(
        vec_levels[1:],
         V0[0]*2.0**(-vec_levels[1:]),
         label="$V_0 2^{-l}$",
         linestyle="--",
         color="black",
     )
    ax_var.legend(loc="best")

    #lines below are to set the x-axis ticks and labels to integers:
    ax_var.xaxis.set_major_locator(MaxNLocator(integer=True)) 
    ax_bias.xaxis.set_major_locator(MaxNLocator(integer=True))  

    #save the figure:
    fn = f"Estimate_E0_V0_from_pilot_run_nsamp={nsamp_in}_nlevels={nlevels}.pdf"
    fig.savefig(PLOT_DIR / fn)
    print(f"Plot saved to {PLOT_DIR / fn}")
    


argParse = 0 #set to zero if you run the file from an IDE, to 1 to run from command line 

if argParse:
    if __name__ == "__main__":
        parser = argparse.ArgumentParser(
            description="Script to plot the biases and variances from the pilot run. It uses datas generated by pilot_run.py"
        )
        parser.add_argument("--nsamp", type=int, default=10000, help="Number of samples, same for all levels.")
        parser.add_argument("--nlevels", type=int, default=10000, help="Number of levels in the pilot run")
        parser.add_argument(
            "--style", type=str, default=NATURE, choices=STYLES, help="Plot style"
        )
        parser.add_argument(
            "--usetex", action="store_true", help="Use LaTeX for text rendering"
        )
        args = parser.parse_args()
    
        main(args.nsamp, args.nseeds, args.style, args.usetex)
else:
    if __name__ == "__main__":

        main(
            nsamp_in=50000,
            nlevels=8,
            style=NATURE,
        )